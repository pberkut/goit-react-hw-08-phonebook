{"version":3,"file":"static/js/226.9a1aa0d2.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","utils/handleFilterContacts.js","components/Container/Container.styled.js","components/Container/Container.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Wrapper/Wrapper.styled.js","components/Wrapper/Wrapper.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { handleFilterContacts } from 'utils/handleFilterContacts';\n\nconst selectContacts = state => state.contacts.items;\n\nconst selectIsLoading = state => state.contacts.isLoading;\n\nconst selectError = state => state.contacts.error;\n\nconst selectFilterValue = state => state.filter;\n\nconst selectFilteredContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filterValue) => {\n    return handleFilterContacts(contacts, filterValue);\n  }\n);\n\nexport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilterValue,\n  selectFilteredContacts,\n};\n","const handleFilterContacts = (contacts, filterValue) =>\n  contacts.filter(contact =>\n    [contact.name.toLowerCase(), contact.number]\n      .join(' ')\n      .includes(filterValue.toLowerCase().trim())\n  );\n\n// const handleFilterContacts = (items, key, filteredValue) =>\n//   items.filter(item =>\n//     item[key].toLowerCase().includes(filteredValue.toLowerCase().trim())\n//   );\n\nexport { handleFilterContacts };\n","import styled from 'styled-components';\n\nexport const ContainerStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 40px;\n`;\n","import PropTypes from 'prop-types';\nimport { ContainerStyled } from './Container.styled';\n\nconst Container = ({ children }) => {\n  return <ContainerStyled>{children}</ContainerStyled>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport { Container };\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  font-size: 18px;\n  text-align: center;\n`;\n\nexport const SectionStyle = styled.div`\n  width: 450px;\n  padding: 10px;\n  border: 1px solid lightgrey;\n  background-color: #ffffe6;\n  :last-of-type {\n    min-height: 200px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { SectionStyle, Title } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <SectionStyle>\n      {title && <Title>{title}</Title>}\n      {children}\n    </SectionStyle>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport { Section };\n","import styled from 'styled-components';\nimport {\n  ErrorMessage as YupErrorMessage,\n  Field as FieldFormik,\n  Form as FormFormik,\n} from 'formik';\n\nexport const Form = styled(FormFormik)`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrorMessage = styled(YupErrorMessage)`\n  font-size: 11px;\n  color: red;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  height: 60px;\n  font-size: 14px;\n  font-weight: 600;\n`;\n\nexport const Field = styled(FieldFormik)`\n  display: block;\n  text-align: center;\n  margin-left: 20px;\n  margin-right: 20px;\n`;\n\nexport const Button = styled.button`\n  /* margin-top: 8px; */\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  ErrorMessage,\n  FormField,\n  Field,\n  Button,\n  Form,\n} from './ContactForm.styled';\nimport { Notify } from 'notiflix';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst INITIAL_VALUE = {\n  name: '',\n  number: '',\n};\n\nconst ContactFormSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Must be 3 characters or more')\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  number: Yup.string()\n    .min(5, 'Must be 5 characters or more')\n    .max(30, 'Must be 30 characters or less')\n    .required('Required'),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = ({ name, number }, actions) => {\n    const isUniqueContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const isUniqueNumber = contacts.some(contact => contact.number === number);\n\n    if (isUniqueContact) {\n      return Notify.failure(`Contact ${name} is already in contacts.`);\n    }\n    if (isUniqueNumber) {\n      return Notify.failure(`Number ${number} is already in contacts.`);\n    }\n\n    dispatch(addContact({ name, number }));\n    Notify.info(`${name} added to your Phonebook`);\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={INITIAL_VALUE}\n      validationSchema={ContactFormSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <FormField>\n          Name:\n          <Field\n            name=\"name\"\n            type=\"text\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMessage name=\"name\" component=\"p\" />\n        </FormField>\n        <FormField>\n          Number:\n          <Field\n            name=\"number\"\n            type=\"tel\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessage name=\"number\" component=\"p\" />\n        </FormField>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport { ContactForm };\n","import styled from 'styled-components';\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  height: 60px;\n  font-size: 14px;\n  font-weight: 600;\n`;\n\nexport const InputStyled = styled.input`\n  margin-left: 20px;\n  margin-right: 20px;\n`;\n","import { FormField, InputStyled } from './Filter.styled';\n\nimport { useDispatch } from 'react-redux';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\nimport { useSelector } from 'react-redux';\nimport { selectFilterValue } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(selectFilterValue);\n\n  const handleSetFilter = e => {\n    dispatch(setFilterValue(e.target.value));\n  };\n\n  return (\n    <FormField>\n      Find contacts by name or number:\n      <InputStyled\n        type=\"text\"\n        value={filter}\n        title=\"Type name or number\"\n        onChange={handleSetFilter}\n      />\n    </FormField>\n  );\n};\n\nexport { Filter };\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-top: 4px;\n`;\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n\n  margin-top: 1px;\n  :hover {\n    color: blue;\n  }\n`;\n\nexport const ContactBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n`;\n\nexport const ButtonBlock = styled.div`\n  display: flex;\n  align-items: flex-start;\n`;\n\nexport const Button = styled.button`\n  /* border: none; */\n  margin: 0;\n  padding: 0;\n  width: auto;\n  overflow: visible;\n  line-height: 0;\n  float: right;\n\n  /* background: transparent; */\n`;\n\nexport const Label = styled.label`\n  font-size: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 140px;\n  font-size: 15px;\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nimport { MdDeleteForever, MdEdit, MdSave } from 'react-icons/md';\nimport {\n  Button,\n  ListItem,\n  Label,\n  Input,\n  ButtonBlock,\n  ContactBlock,\n} from './ContactItem.styled';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact, editContact } from 'redux/contacts/operations';\n\nconst ContactItem = ({ index, contact }) => {\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n  const [isEdit, setIsEdit] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleEditContact = () => {\n    if (!isEdit) {\n      setIsEdit(true);\n    } else {\n      setIsEdit(false);\n      dispatch(editContact({ id: contact.id, name, number }));\n    }\n  };\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContact(contact.id));\n  };\n\n  const onSubmit = e => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n    handleEditContact();\n  };\n\n  return (\n    <ListItem>\n      <span>{index + 1}.</span>\n      <ContactBlock>\n        {isEdit ? (\n          <form onKeyDown={onSubmit}>\n            <Label>\n              Name:&nbsp;\n              <Input\n                name=\"name\"\n                value={name}\n                onChange={handleChange}\n                title=\"Edit name\"\n                type=\"text\"\n              />\n            </Label>\n            <Label>\n              Number:&nbsp;\n              <Input\n                name=\"number\"\n                value={number}\n                onChange={handleChange}\n                title=\"Edit phone number\"\n                type=\"tel\"\n              />\n            </Label>\n          </form>\n        ) : (\n          <>\n            <span>{name} :</span> &nbsp;\n            <span>{number}</span>\n          </>\n        )}\n      </ContactBlock>\n      <ButtonBlock>\n        <Button type=\"button\" onClick={handleEditContact} role=\"Edit contact\">\n          {isEdit ? <MdSave /> : <MdEdit />}\n        </Button>\n        <Button\n          type=\"button\"\n          onClick={handleDeleteContact}\n          role=\"Delete contact\"\n        >\n          <MdDeleteForever />\n        </Button>\n      </ButtonBlock>\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  index: PropTypes.number.isRequired,\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\nexport { ContactItem };\n","import { List } from './ContactList.styled';\nimport { ContactItem } from '../ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <div>\n      <List>\n        {visibleContacts.map((contact, idx) => (\n          <ContactItem key={contact.id} contact={contact} index={idx} />\n        ))}\n      </List>\n    </div>\n  );\n};\n\nexport { ContactList };\n","import styled from 'styled-components';\n\nexport const WrapperStyled = styled.div`\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n    rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n    rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n  padding: 5px;\n  background-color: #fff;\n  border-radius: 8px;\n\n  > * {\n    &:last-child {\n      max-height: 429px;\n      overflow: auto;\n    }\n  }\n`;\n","import { WrapperStyled } from './Wrapper.styled';\n\nconst Wrapper = ({ children }) => <WrapperStyled>{children}</WrapperStyled>;\n\nexport { Wrapper };\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { Container } from '../components/Container';\nimport { Section } from '../components/Section';\nimport { ContactForm } from '../components/ContactForm';\nimport { Filter } from '../components/Filter';\nimport { ContactList } from '../components/ContactList';\nimport { Wrapper } from 'components/Wrapper/Wrapper';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  // const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Wrapper>\n        <Section title=\"Phonebook\">\n          <ContactForm />\n        </Section>\n        <Section title=\"Search\">\n          <Filter />\n        </Section>\n\n        <Section title=\"Contacts\">\n          {error && <b>Error: {error}</b>}\n          {isLoading && <p>Request in progress...</p>}\n\n          <ContactList />\n        </Section>\n      </Wrapper>\n    </Container>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilterValue","filter","selectFilteredContacts","createSelector","filterValue","contact","name","toLowerCase","number","join","includes","trim","handleFilterContacts","ContainerStyled","styled","Container","children","Title","SectionStyle","Section","title","Form","FormFormik","ErrorMessage","YupErrorMessage","FormField","Field","FieldFormik","Button","INITIAL_VALUE","ContactFormSchema","Yup","shape","min","max","required","ContactForm","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","actions","isUniqueContact","some","isUniqueNumber","Notify","addContact","resetForm","type","pattern","component","InputStyled","Filter","value","onChange","e","setFilterValue","target","List","ListItem","ContactBlock","ButtonBlock","Label","Input","ContactItem","index","useState","setName","setNumber","isEdit","setIsEdit","handleChange","handleEditContact","editContact","id","onKeyDown","key","onClick","role","deleteContact","ContactList","visibleContacts","map","idx","WrapperStyled","Wrapper","Contacts","useEffect","fetchContacts"],"sourceRoot":""}